<?xml version="1.0" encoding="UTF-8"?>
<project name="android_core" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->


    <!-- Custom Android task to deal with the project target, and import the
         proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar"/>
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar"/>
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar"/>
    </path>

    <!-- <taskdef name="setup"
             classname="com.android.ant.NewSetupTask"
             classpathref="android.antlibs"/>

    <taskdef name="aapt"
             classname="com.android.ant.AaptExecTask"
             classpathref="android.antlibs"/> -->

    <target name="help">
        <echo>Available commands in this build script:
        </echo>
        <echo>generate-testing:
            Generate an apk (suncorp-testing.apk) with ${testing.search.url}
        </echo>
        <echo>generate-production:
            Generate an apk (suncorp-production.apk) with ${production.search.url}
        </echo>
        <echo>generate-installers:
            Generate both testing and production apk
        </echo>
        <echo>generate-R:
            Generate the R.java
        </echo>
    </target>

    <target name="generate-R" description="Generate the R.java file for this project's resources.">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <mkdir dir="gen"/>
        <!--The gen folder may not exist on CI Server-->

        <!--<path id="project.libraries.res" path="../REA_Core/res"/>-->
        <aapt executable="${sdk.dir}/platform-tools/aapt"
              command="package"
              verbose="false"
              manifest="AndroidManifest.xml"
              androidjar="${sdk.dir}/platforms/android-14/android.jar"
              rfolder="gen"
              nonConstantId="false"
              projectLibrariesResName=""
              projectLibrariesPackageName="">
            <res path="res"/>
        </aapt>
        <copy todir="${classes.dir}">
            <fileset dir="gen/"/>
        </copy>
    </target>

    <target name="-init">
        <property name="dir.output" value="./build/outputs/"/>
        <property name="installer.name" value="android_core-release.apk"/>
    </target>

    <target name="-clean-up" depends="-init">
        <delete dir="${dir.output}"/>
        <mkdir dir="${dir.output}"/>
    </target>

    <target name="prod-conf">
        <copy file="product.properties" overwrite="true" tofile="./src/settings.properties"/>
    </target>

    <target name="generate-production" depends="-init,clean">
        <antcall target="prod-conf"/>
        <antcall target="release"/>
        <copy file="./bin/${installer.name}" tofile="${dir.output}/suncorp-production.apk"/>
    </target>

    <target name="test-conf">
        <copy file="testing.properties" overwrite="true" tofile="./src/settings.properties"/>
    </target>

    <target name="generate-testing" depends="-init,clean">
        <antcall target="test-conf"/>
        <antcall target="release"/>
        <copy file="./bin/${installer.name}" tofile="${dir.output}/suncorp-testing.apk"/>
    </target>

    <target name="generate-installers" depends="-clean-up">
        <antcall target="generate-testing"/>
        <antcall target="generate-production"/>
    </target>

    <!--for testing-->
    <path id="test.classpath">
        <fileset dir="${test.libs}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${gen.dir}">
            <include name="R"/>
        </fileset>
        <fileset dir="${sdk.dir}/platforms/android-8">
            <include name="*.jar"/>
        </fileset>
    </path>
    <taskdef classpathref="test.classpath" resource="tasks.properties"/>

    <target name="coverage"
            depends="clean,compile,instrument,test,coverage-report,summary-coverage-report,alternate-coverage-report"
            description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

    <target name="clean" description="Remove all files created by the build/test process.">
        <delete dir="${classes.dir}"/>
        <delete dir="${instrumented.dir}"/>
        <delete dir="${reports.dir}"/>
        <delete file="cobertura.log"/>
        <delete file="cobertura.ser"/>
    </target>


    <target name="compile" depends="init,generate-R">
        <javac srcdir="${classes.dir}" destdir="${classes.dir}" debug="yes">
            <classpath refid="test.classpath"/>
        </javac>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes">
            <classpath refid="test.classpath"/>
        </javac>
        <javac srcdir="${test.dir}" destdir="${classes.dir}" debug="yes">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${instrumented.dir}"/>
        <mkdir dir="${reports.xml.dir}"/>
        <mkdir dir="${reports.html.dir}"/>
        <mkdir dir="${coverage.xml.dir}"/>
        <mkdir dir="${coverage.summaryxml.dir}"/>
        <mkdir dir="${coverage.html.dir}"/>
    </target>

    <target name="instrument" depends="init,compile">
        <!--
              Remove the coverage data file and any old instrumentation.
          -->
        <delete file="cobertura.ser"/>
        <delete dir="${instrumented.dir}"/>

        <!--
              Instrument the application classes, writing the
              instrumented classes into ${build.instrumented.dir}.
          -->
        <cobertura-instrument todir="${instrumented.dir}">
            <!--
                   The following line causes instrument to ignore any
                   source line containing a reference to log4j, for the
                   purposes of coverage reporting.
               -->
            <ignore regex="org.apache.log4j.*"/>

            <fileset dir="${classes.dir}">
                <!--
                        Instrument all the application classes, but
                        don't instrument the test classes.
                    -->
                <include name="**/*.class"/>
                <exclude name="**/*Test.class"/>
                <exclude name="**/instrument/**"/>
                <exclude name="**/R.*"/>
                <exclude name="**/R$*.*"/>
                <exclude name="**/*Stub.*"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="test" depends="clean,init,test_setting, compile, include_xml, include_properties">
        <echo message="${sdk.dir}"/>
        <junit fork="yes" dir="${basedir}" failureProperty="test.failed" haltonerror="true" haltonfailure="true"
               printsummary="yes" forkmode="perBatch"
               showoutput="yes">
            <!--
                Note the classpath order: instrumented classes are before the
                original (uninstrumented) classes.  This is important.
            -->
            <classpath location="${instrumented.dir}"/>
            <classpath location="${classes.dir}"/>

            <!--
                The instrumented classes reference classes used by the
                Cobertura runtime, so Cobertura and its dependencies
                must be on your classpath.
            -->
            <classpath refid="test.classpath"/>


            <!--
                for JUnit debug
            -->

            <formatter
                    type="brief"
                    usefile="false"
                    />
            <formatter type="brief"/>

            <formatter type="xml"/>
            <batchtest todir="${reports.xml.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${reports.xml.dir}">
            <fileset dir="${reports.xml.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.html.dir}"/>
        </junitreport>
    </target>

    <target name="test_setting">
        <copy file="testing.properties" overwrite="true" tofile="./src/settings.properties"/>
    </target>

    <target name="include_xml">
        <copy todir="${classes.dir}">
            <fileset dir="${test.dir}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="include_properties">
        <copy todir="${instrumented.dir}">
            <fileset dir="${src.dir}" includes="**/*.properties"/>
        </copy>
    </target>

    <target name="coverage-check">
        <cobertura-check branchrate="34" totallinerate="100"/>
    </target>

    <target name="coverage-report">
        <!--
            Generate an XML file containing the coverage data using
            the "srcdir" attribute.
        -->
        <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml"/>
    </target>

    <target name="summary-coverage-report">
        <!--
            Generate an summary XML file containing the coverage data using
            the "srcdir" attribute.
        -->
        <cobertura-report srcdir="${src.dir}" destdir="${coverage.summaryxml.dir}" format="summaryXml"/>
    </target>

    <target name="alternate-coverage-report">
        <!--
            Generate a series of HTML files containing the coverage
            data in a user-readable form using nested source filesets.
        -->
        <cobertura-report destdir="${coverage.html.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>


    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
